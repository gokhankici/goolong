prog('paxos', Decls, ensures(FinalAssert), T, sym(A,a,while(A, true, AccLoop))) :-                                                 %% code
    append([decl(p, set), decl(a,set)], LocalDecls, Decls),                                                                        %% code
    append(PropDecls, AccDecls, LocalDecls),                                                                                       %% code
    PropDecls = [ decl(dc, map(set(p), int)),                                                                                      %% code
                  decl(t, map(set(p), int)),                                                                                       %% code
                  decl(w_t, map(set(p), int)),                                                                                     %% code
                  decl(w, map(set(p), int)),                                                                                       %% code
                  decl(x_t, map(set(p), int)),                                                                                     %% code
                  decl(x, map(set(p), int)),                                                                                       %% code
                  decl(ho, map(set(p), int)),                                                                                      %% code
                  decl(ready, map(set(p), int)),                                                                                   %% code
                  decl(retType, map(set(p), int)),                                                                                 %% code
                  decl(decided, map(set(p), int)),                                                                                 %% code
                  decl(p0, int),                                                                                                   %% annot
                  decl(a0, int),                                                                                                   %% annot
                  decl(k, map(set(p), int)),                                                                                       %% annot
                  decl(l, map(set(p), int)),                                                                                       %% annot
                  decl(m, map(set(p), int))                                                                                        %% annot
                ],                                                                                                                 %% 
    Assumptions=seq([ assume(P, forall([decl(i,int)], implies(ref(t,i)=ref(t,P), i=P))), %% Paxos assumption                       %% inv
                      /** Cardinality Invariants **/                                                                               %% 
                      assume(P, forall([decl(i,int)], implies(and([elem(i,p), ref(l,i) > card(a)/2]), or([ref(ready,P)=0, ref(t,P) < ref(t,i)])))), %% inv
                      assume(P,elem(a0,a)),                                                                                        %% inv
                      assume(P,implies(and([0 =< ref(x_t,P)]), and([ref(x,P) = ref(a_w,a0), ref(x_t,P) = ref(a_w_t,a0)]))),        %% inv
                      assume(P, forall([decl(i,int)], implies(and([elem(i,p),ref(ready,i)=1,ref(k,i)+ref(l,i)>card(a)/2,ref(ready,P)=1]), and([ref(t,i) =< ref(x_t,P), 0 =< ref(x_t,P)])))) %% inv
                    ]),                                                                                                            %% 
    FinalAssert=forall([decl(aa,int),decl(p1,int),decl(p2,int)],                                                                   %% code
                       implies(and([elem(aa,a), elem(p1,p), elem(p2,p), ref(decided,p1)=1, ref(decided,p2)=1,                      %% annot
                                    /** Cardinalities **/                                                                          %% 
                                    implies(and([ref(k,p1) > card(a)/2, ref(k,p2) > card(a)/2]), and([ref(t,p1) =< ref(a_w_t,aa), ref(t,p2) =< ref(a_w_t,aa)])), %% annot
                                    0 =< ref(l,p1), 0 =< ref(l,p2)]), ref(x,p1) = ref(x,p2))),                                     %% annot
    %% assert (forall a,p1, p2 :: (a in As && p1 in Ps && p2 in Ps && Decided[p1] && Decided[p2] &&                                %% 
    %%   ((k[p1] > |As|/2 && k[p2] > |As|/2) ==> (V_T[a] >= T[p1] && V_T[a] >= T[p2])) &&                                          %% 
    %%   l[p1] >= 0 && l[p2] >= 0)                                                                                                 %% 
    %%   ==>                                                                                                                       %% 
    %%   X[p1] == X[p2]);                                                                                                          %% 
    SumInv=pre(P, forall([decl(i,int)], implies(and([elem(i,p),here(i)]),ref(k,i) + ref(l,i) + ref(m,i) = card(a)))),              %% inv
    HOleK=pre(P, forall([decl(i,int)], implies(and([elem(i,p),here(i)]), and([ref(ready,i)=1,ref(ho,i)=<ref(k,i)])))),           %% inv
    Prop= seq([for(P, A, a,                                                                                                        %% code
                   seq([ pre(P, forall([decl(i,int)], implies(and([elem(i,p),here(i)]), and([ref(ready,i)=0, ref(decided,i)=0, ref(k,i) = 0])))), %% inv
                         SumInv,
                         Assumptions,                                                                                              %% 

                         send(P, e_pid(A), pair(P, pair(0, pair(t, dc)))),                                                         %% code
                         group(recv(P, e_pid(A), pair(dc, pair(w_t, w))),                                                          %% code
                               ite(P, ref(w_t,P)>ref(x_t,P),                                                                       %% code
                                   seq([assign(P, x_t, w_t),                                                                       %% code
                                        assign(P, x, w),                                                                           %% code
                                        assign(P, ho, ref(ho,P) + 1)                                                               %% code
                                       ]),                                                                                         %% code
                                   skip                                                                                            %% code
                                  ))                                                                                               %% code
                       ])),                                                                                                        %% 

               /* acceptance phase */                                                                                              %% 

               if(P, ref(ho,P)>card(a)/2,                                                                                          %% code
                  seq([pre(P, forall([decl(i,int)], implies(and([elem(i,p),ref(decided,i)=1]), and([ref(k,i)>card(a)/2,ref(ho,i)>card(a)/2,ref(ready,i)=1])))),       %% inv
                       pre(P, forall([decl(i,int)], implies(and([elem(i,p),here(i)]), and([ref(decided,i)=0, ref(k,i)=0])))),      %% inv
                       SumInv,
                       assign(P, ho, 0),                                                                                           %% code
                       assign(P, ready, 1),                                                                                        %% code
                       for(P, A, a,                                                                                                %% code
                           seq([pre(P, forall([decl(i,int)], implies(and([elem(i,p),here(i)]), and([ref(ready,i)=1,ref(decided,i)=0])))), %% inv
                                HOleK,
                                SumInv,
                                pre(P,forall([decl(i,int),decl(j,int)], implies(and([elem(i,p),elem(j,a),ref(l,i) > card(a)/2,ref(k,i)=0]), ref(a_w_t,j) < ref(t,i)))), %% inv

                                pre(P,forall([decl(qa,int),decl(qp,int)], implies( and([elem(qa,a),elem(qp,p),ref(ready,qp)=1,ref(t,qp)=<ref(a_w_t,qa), ref(k,qp)+ref(l,qp) > card(a)/2]), ref(a_w,qa)=ref(x,qp)))),  %% inv
                                Assumptions,                                                                                       %% 

                                send(P, e_pid(A), pair(P, pair(1, pair(t, x)))),                                                   %% code
                                group(recv(P, e_pid(A), pair(retType, pair(dc, dc))),                                              %% code
                                      seq([assign(P, ho, ref(ho,P)+1),                                                             %% code
                                           /* ghost updates */                                                                     %% 
                                           assign(P, k, ref(k,P)+1),                                                               %% annot
                                           assign(P, l, ref(l,P)-1),                                                               %% annot
                                           assume(P, and([ref(k,P)>0, 0 =< ref(l,P)]))                                             %% annot
                                          ]))])),                                                                                  %% code
                       if(P, 2*ref(ho,P)>card(a),                                                                                  %% code
                          seq([pre(P, forall([decl(i,int)], implies(and([elem(i,p),here(i)]), ref(ready,i)=1))),                   %% inv
                               HOleK,
                               SumInv,
                               assign(P, decided, 1)                                                                               %% code
                              ]))])                                                                                                %% code
                 )]),                                                                                                              %% code
    Proposers=sym(P, p, seq([pre(P, ref(ready,P)=0),                                                                               %% annot
                             pre(P, ref(decided,P)=0),                                                                             %% annot
                             pre(P, ref(ho,P)=0),                                                                                  %% annot
                             pre(P, ref(t,P)>0),                                                                                   %% annot
                             pre(P, and([ref(k,P) = 0, ref(l,P) = card(a), ref(m,P) = 0])),                                        %% annot
                             assign(P, ho, 0),                                                                                     %% code
                             assign(P, ready, 0),                                                                                  %% code
                             assign(P, decided, 0),                                                                                %% code
                             assume(P, forall([decl(i,int)],                                                                       %% annot
                                              and([ref(m,i)=0, ref(l,i) = card(a), ref(k,i) = 0, ref(t,i) > 0]))),                 %% annot
                             Prop                                                                                                  %% 
                            ])),                                                                                                   %% code
    AccDecls = [ decl(id, map(set(a), int)),                                                                                       %% code
                 decl(msgType, map(set(a), int)),                                                                                  %% code
                 decl(seqno, map(set(a), int)),                                                                                    %% code
                 decl(val, map(set(a), int)),                                                                                      %% code
                 decl(max, map(set(a), int)),                                                                                      %% code
                 decl(a_w, map(set(a), int)),                                                                                      %% code
                 decl(a_w_t, map(set(a), int)),                                                                                    %% code
                 decl(bottom, map(set(a), int))                                                                                    %% code
               ],                                                                                                                  %% 
    AccLoop=seq([recv(A, e_pid(p), pair(id, pair(msgType, pair(seqno, val)))),                                                     %% code
                 ite(A, ref(msgType,A)=0,                                                                                          %% code
                     /* proposal message */                                                                                        %% 
                     if(A, ref(seqno,A)>ref(max,A),                                                                                %% code
                        seq([ assign(A, max, seqno),                                                                               %% code
                              if(A, ref(t,p0) =< ref(max,A),                                                                       %% annot
                                 seq([ assume(A, ref(l, p0) > 0),                                                                  %% annot
                                       assign(p0, l, upd(l, p0, ref(l,p0) - 1)),                                                   %% annot
                                       assign(p0, m, upd(m, p0, ref(m,p0) + 1))]))                                                 %% annot
                            ])),                                                                                                   %% code
                     /* acceptance message */                                                                                      %% 
                     if(A, ref(max,A) =< ref(seqno,A),                                                                             %% code
                        seq([assign(A, a_w, val),                                                                                  %% code
                             assign(A, a_w_t, seqno)                                                                               %% code
                            ]))),                                                                                                  %% code
                 send(A, e_var(id), pair(1, pair(a_w_t, a_w)))                                                                     %% code
                ]),                                                                                                                %% code
    Acceptors=sym(A, a, seq([pre(A, ref(a_w_t,A) = 0),                                                                             %% annot
                             assign(A, max, bottom),                                                                               %% code
                             assign(A, a_w, bottom),                                                                               %% code
                             assign(A, a_w_t, 0),                                                                                  %% code
                             while(A, true, AccLoop)                                                                               %% code
                            ])),                                                                                                   %% code
    T=par([Proposers,Acceptors])                                                                                                   %% code
.
