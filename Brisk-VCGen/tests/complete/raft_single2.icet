prog(raft_single, Decls, ensures(Safety), Program) :-
      Decls=[ decl(f, set)
            , decl(c, set)
              
            , decl(voted,    map(set(f), int))
            , decl(id,       map(set(f), int))
            , decl(term,     map(set(f), int))
            , decl(fterm,    map(set(f), int))
            , decl(voted,    map(set(f), int))
            , decl(votes,    map(set(f), map(int, int)))
            , decl(votedFor, map(set(f), int))
            , decl(success_f,  map(set(f), int))
              
            , decl(count, map(set(c), int))
            , decl(isLeader, map(set(c), int))
            , decl(cterm, map(set(c), int))
            , decl(success_c, map(set(c), int))
            , decl(k, map(set(c), int))
            , decl(l, map(set(c), int))
            , decl(c0, int)
            , decl(f0, int)
            
              /* k[c0] : #{f | f.term < c.term } */
            %% , decl_card(k, c, c0, f0, and([elem(f0,f),ref(fterm,f0) < ref(cterm,c0)]))
              /* l[c0] : #{f | f.term < c.term } */
            %% , decl_card(l, c, c0, f0, and([ elem(f0,f)
            %%                               , ref(fterm,f0) = ref(cterm,c0)
            %%                               , ref(votedFor,f0) = c0
            %%                               , ref(ref(votes,f0),ref(cterm,c0)) = c0
            %%                               ]))
            ]
    
    %% , Safety=forall([decl(i,int)], implies(and([elem(i,c), ref(isLeader,i)=1]), card(f)/2 < ref(l,i) + ref(m,i)))
    , Safety=forall([decl(i,int), decl(j,int)], implies(and([elem(i,c), elem(j,c),
                                                             ref(cterm,i)=ref(cterm,j),
                                                             ref(isLeader,j)=1, ref(isLeader,i)=1]), i=j))
      
    , Program=par([sym(F, f, P1), sym(C, c, P2)])
    , P1=
	/* followers */
	  seq([
	     %% assign(F, voted, 0),
	     for(F, _, c,
		 seq([
		      recv(F, e_pid(c), pair(id,term)),
		      if(F, ref(fterm, F) < ref(term, F),
			 seq([
			      assign(F, fterm, term),
			      assign(F, voted, 0),
			      assign(F, votedFor, 0)
			      ])
			),
		      ite(F,
			 and([ref(fterm,F)=<ref(term,F),implies(ref(voted,F)=1, ref(votedFor,F)=ref(id,F))]),
			 seq([
			      assign(F, voted, 1),
			      assign(F, votedFor, id),
                  assign(F, votes, upd(votes, fterm, id)),
			      assign(F, success_f, 1)
			     ]),
			  assign(F, success_f, 0)
			 ),
		      
		      send(F, e_var(id), success_f)
		     ])
		)
	    ]),
	P2=
	/* Candidates */
        seq([
        pre(C, and([ref(k,C) = card(f), ref(l,C) = 0, ref(count,C) = 0, ref(isLeader, C) = 0])),
		assign(C, count, 0),
		assign(C, isLeader, 0),
        assume(C, forall([decl(i,int)], ref(k,i) = card(f))),
        assume(C, forall([decl(i,int)], ref(l,i) = 0)),
		for(C, F, f,
		    seq([
             pre(C, forall([decl(i,int)], implies(elem(i,c), and([ ref(k,i)+ref(l,i) =< card(f)
                                                                 , ref(count,i)=ref(l,i)])))),
			 send(C, e_pid(F), pair(C, cterm)),
			 recv(C, e_pid(F), success_c),
			 if(C, ref(success_c,C)=1, assign(C, count, ref(count,C)+1)),
             /* Ghost Updates: these should be done automatically in the sequentialized variant */
             if(C,and([ref(success_c,C)=1,ref(votedFor,F)=C, ref(fterm,F)=ref(cterm,C)]), seq([
                 assign(C, l, ref(l,C) + 1)
               , assign(C, k, ref(k,C) - 1)
               , assume(C, 0 < ref(l,C))
               , assume(C, 0 =< ref(k,C))
             ]))
			])
		   ),
           group( 
  		          pre(C, forall([decl(i,int)], implies(and([elem(i,c), ref(isLeader,i)=1]), card(f)<ref(count,i)*2)))
                , seq([assume(C,forall([decl(i,int)], 0 =< ref(k,i))),
                       assume(C,forall([decl(i,int)], 0 =< ref(l,i))),
                       assume(C, elem(f0,f)),
                       assume(C,forall([decl(i,int),decl(j,int)], 
                                              implies( and([elem(i,c), elem(j,c), ref(l,i) > card(f)/2, ref(l,j) > card(f)/2]),
                                                       and([ ref(ref(votes,f0),ref(cterm,i))=i
                                                             , ref(ref(votes,f0),ref(cterm,j))=j
                                                             , ref(cterm,i) =< ref(fterm, f0)
                                                             , ref(cterm,i) =< ref(fterm, f0)
                                                           ])))),
                       pre(C,forall([decl(i,int), decl(j,int)], implies(and([elem(i,c)
                                                                           , elem(j,c)
                                                                           , ref(count,i) > card(f)/2
                                                                           , ref(count,j) > card(f)/2
                                                                           , ref(cterm,i)=ref(cterm,j)
                                                                           , ref(isLeader,j)=1
                                                                           , ref(isLeader,i)=1
                                                                            ])
                                                                        , i=j))),
                       if(C, card(f)<2*ref(count,C), assign(C, isLeader, 1))
                      ])
           )                                                      
	       ])
.
